from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from database import Database
from wallet import Wallet
from game import MathGame
from config import BOT_TOKEN
import asyncio
import os
import random

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database('game.db')

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_answers = {}
user_bets = {}
REWARD = 100

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üí∞ –ë–∞–ª–∞–Ω—Å")],
            [KeyboardButton(text="üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å"), KeyboardButton(text="üé≤ –ò–≥—Ä–∞—Ç—å –≤ –∫–æ—Å—Ç–∏"), KeyboardButton(text="üé∞ –°–ª–æ—Ç—ã")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ç–∞–≤–∫–∏
def get_dice_bet_type_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ß—ë—Ç/–ù–µ—á–µ—Ç (x2)", callback_data="dice_even_odd")],
        [InlineKeyboardButton(text="–ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ (x6)", callback_data="dice_exact")]
    ])
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —á—ë—Ç/–Ω–µ—á–µ—Ç
def get_even_odd_keyboard():
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ß—ë—Ç–Ω–æ–µ", callback_data="bet_even"),
         InlineKeyboardButton(text="–ù–µ—á—ë—Ç–Ω–æ–µ", callback_data="bet_odd")]
    ])
    return keyboard

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞
def get_number_keyboard():
    buttons = []
    row = []
    for i in range(1, 7):
        row.append(InlineKeyboardButton(text=str(i), callback_data=f"bet_number_{i}"))
        if len(row) == 3:
            buttons.append(row)
            row = []
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

# Add this helper function after the keyboard functions
def get_mention(user) -> str:
    if user.username:
        return f"@{user.username}"
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º raw —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ Markdown
    full_name = user.full_name.replace("_", r"\_").replace("*", r"\*").replace("[", r"\[").replace("]", r"\]").replace("`", r"\`")
    return f"[{full_name}](tg://user/{user.id})"

@dp.message(CommandStart())
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    user_mention = get_mention(message.from_user)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–æ–≤—ã–π
    if not db.user_exists(user_id):
        db.add_user(user_id, username)
        await message.answer(
            f"{user_mention}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É! –í–∞—à –Ω–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: 0 –º–æ–Ω–µ—Ç\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    else:
        balance = db.get_balance(user_id)
        await message.answer(
            f"{user_mention}, —Å –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º! –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç\n\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
            reply_markup=get_main_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )

@dp.message(lambda message: message.text == "üí∞ –ë–∞–ª–∞–Ω—Å")
async def balance_button_handler(message: types.Message):
    user_id = message.from_user.id
    user_mention = get_mention(message.from_user)
    wallet = Wallet(db, user_id)
    balance = wallet.get_balance()
    sent_message = await message.answer(
        f"{user_mention}, üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance} –º–æ–Ω–µ—Ç",
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    asyncio.create_task(delete_message_after_delay(sent_message, 5))
    asyncio.create_task(delete_message_after_delay(message, 5))

@dp.message(lambda message: message.text == "üí∏ –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å")
async def earn_button_handler(message: types.Message):
    user_id = message.from_user.id
    user_mention = get_mention(message.from_user)
    game = MathGame()
    problem, correct_answer = game.generate_problem()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answers[user_id] = correct_answer
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    sent_message = await message.answer(
        f"{user_mention}, —Ä–µ—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä:\n\n{problem}",
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
    asyncio.create_task(delete_message_after_delay(sent_message, 5))

@dp.message(lambda message: message.text == "üé≤ –ò–≥—Ä–∞—Ç—å –≤ –∫–æ—Å—Ç–∏")
async def dice_game_handler(message: types.Message):
    sent_message = await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å—Ç–∞–≤–∫–∏:\n\n"
        "‚Ä¢ –ß—ë—Ç/–ù–µ—á–µ—Ç - –≤—ã–∏–≥—Ä—ã—à x2\n"
        "‚Ä¢ –ö–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —á–∏—Å–ª–æ - –≤—ã–∏–≥—Ä—ã—à x6\n\n"
        "–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Å—Ç–∞–≤–∫–∏, —É–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É.",
        reply_markup=get_dice_bet_type_keyboard()
    )
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    asyncio.create_task(delete_message_after_delay(sent_message, 5))
    asyncio.create_task(delete_message_after_delay(message, 5))

@dp.callback_query(lambda c: c.data == "dice_even_odd")
async def dice_even_odd_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_bets[user_id] = {"type": "even_odd"}
    
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á—ë—Ç–Ω–æ–µ –∏–ª–∏ –Ω–µ—á—ë—Ç–Ω–æ–µ:\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        reply_markup=get_even_odd_keyboard()
    )

@dp.callback_query(lambda c: c.data == "dice_exact")
async def dice_exact_handler(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    user_bets[user_id] = {"type": "exact"}
    
    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 6:\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.",
        reply_markup=get_number_keyboard()
    )

@dp.callback_query(lambda c: c.data.startswith("bet_"))
async def process_bet_choice(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    choice = callback_query.data
    
    if user_id not in user_bets:
        await callback_query.answer("–ù–∞—á–Ω–∏—Ç–µ –∏–≥—Ä—É –∑–∞–Ω–æ–≤–æ.")
        return
    
    if choice.startswith("bet_number_"):
        number = int(choice.split("_")[2])
        user_bets[user_id]["choice"] = number
        sent_message = await callback_query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —á–∏—Å–ª–æ {number}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")
    elif choice in ["bet_even", "bet_odd"]:
        user_bets[user_id]["choice"] = choice
        choice_text = "—á—ë—Ç–Ω–æ–µ" if choice == "bet_even" else "–Ω–µ—á—ë—Ç–Ω–æ–µ"
        sent_message = await callback_query.message.edit_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {choice_text}. –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:")
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    asyncio.create_task(delete_message_after_delay(sent_message, 5))

@dp.message(lambda message: message.text == "üé∞ –°–ª–æ—Ç—ã")
async def slots_game_handler(message: types.Message):
    user_id = message.from_user.id
    user_mention = get_mention(message.from_user)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏–≥—Ä—É –≤ —Å–ª–æ—Ç—ã
    user_bets[user_id] = {"type": "slots"}
    
    sent_message = await message.answer(
        f"{user_mention}, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏:\n\n"
        f"‚Ä¢ –î–∂–µ–∫–ø–æ—Ç (—Ç—Ä–∏ –≤ —Ä—è–¥) - –≤—ã–∏–≥—Ä—ã—à x10\n"
        f"‚Ä¢ –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ - –≤–æ–∑–≤—Ä–∞—Ç —Å—Ç–∞–≤–∫–∏\n"
        f"‚Ä¢ –†–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã - –ø—Ä–æ–∏–≥—Ä—ã—à",
        parse_mode=ParseMode.MARKDOWN
    )
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    asyncio.create_task(delete_message_after_delay(sent_message, 5))
    asyncio.create_task(delete_message_after_delay(message, 5))

@dp.message()
async def process_message(message: types.Message):
    user_id = message.from_user.id
    user_mention = get_mention(message.from_user)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–≥—Ä–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–ª–æ—Ç—ã
    if user_id in user_bets and user_bets[user_id].get("type") == "slots":
        try:
            bet_amount = int(message.text)
            if bet_amount <= 0:
                raise ValueError
            
            wallet = Wallet(db, user_id)
            balance = wallet.get_balance()
            
            if bet_amount > balance:
                sent_message = await message.answer(
                    f"{user_mention}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏!",
                    parse_mode=ParseMode.MARKDOWN
                )
                asyncio.create_task(delete_message_after_delay(sent_message, 5))
                return
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
            wallet.subtract_coins(bet_amount)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ—Ç
            slot_message = await message.answer_dice(emoji="üé∞")
            slot_value = slot_message.dice.value
            
            # –ñ–¥–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            await asyncio.sleep(5)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à
            if slot_value == 64:  # –î–∂–µ–∫–ø–æ—Ç (—Ç—Ä–∏ –≤ —Ä—è–¥)
                multiplier = 10
                win_amount = bet_amount * multiplier
                wallet.add_coins(win_amount)
                result_text = f"üéâ –î–ñ–ï–ö–ü–û–¢! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} –º–æ–Ω–µ—Ç!"
            elif slot_value in [1, 2, 3, 4, 5]:  # –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞
                multiplier = 1
                win_amount = bet_amount * multiplier
                wallet.add_coins(win_amount)
                result_text = f"üéØ –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞! –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞: {win_amount} –º–æ–Ω–µ—Ç."
            else:  # –ü—Ä–æ–∏–≥—Ä—ã—à
                result_text = "üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            sent_message = await message.answer(
                f"{user_mention}, {result_text}\n\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {wallet.get_balance()} –º–æ–Ω–µ—Ç",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            asyncio.create_task(delete_message_after_delay(sent_message, 5))
            asyncio.create_task(delete_message_after_delay(message, 5))
            asyncio.create_task(delete_message_after_delay(slot_message, 5))
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
            del user_bets[user_id]
            
        except ValueError:
            sent_message = await message.answer(
                f"{user_mention}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).",
                parse_mode=ParseMode.MARKDOWN
            )
            asyncio.create_task(delete_message_after_delay(sent_message, 5))
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω–∞—è –∏–≥—Ä–∞ –≤ –∫–æ—Å—Ç–∏
    elif user_id in user_bets and "choice" in user_bets[user_id]:
        try:
            bet_amount = int(message.text)
            if bet_amount <= 0:
                raise ValueError
            
            wallet = Wallet(db, user_id)
            balance = wallet.get_balance()
            
            if bet_amount > balance:
                sent_message = await message.answer(
                    f"{user_mention}, —É –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è —Ç–∞–∫–æ–π —Å—Ç–∞–≤–∫–∏!",
                    parse_mode=ParseMode.MARKDOWN
                )
                asyncio.create_task(delete_message_after_delay(sent_message, 5))
                return
            
            # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞–≤–∫—É
            wallet.subtract_coins(bet_amount)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—É–±–∏–∫
            dice_message = await message.answer_dice(emoji="üé≤")
            dice_value = dice_message.dice.value
            
            # –ñ–¥–µ–º –∞–Ω–∏–º–∞—Ü–∏—é
            await asyncio.sleep(5)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã–∏–≥—Ä—ã—à –¥–ª—è –∏–≥—Ä—ã –≤ –∫–æ—Å—Ç–∏
            bet_type = user_bets[user_id]["type"]
            choice = user_bets[user_id]["choice"]
            
            if bet_type == "exact" and choice == dice_value:
                # –í—ã–∏–≥—Ä—ã—à x6 –∑–∞ —É–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
                multiplier = 6
                win_amount = bet_amount * multiplier
                wallet.add_coins(win_amount)
                result_text = f"üéâ –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {dice_value}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} –º–æ–Ω–µ—Ç!"
            elif bet_type == "even_odd":
                is_even = dice_value % 2 == 0
                if (choice == "bet_even" and is_even) or (choice == "bet_odd" and not is_even):
                    # –í—ã–∏–≥—Ä—ã—à x2 –∑–∞ —É–≥–∞–¥–∞–Ω–Ω—É—é —á–µ—Ç–Ω–æ—Å—Ç—å
                    multiplier = 2
                    win_amount = bet_amount * multiplier
                    wallet.add_coins(win_amount)
                    result_text = f"üéØ –í—ã–ø–∞–ª–æ {'—á–µ—Ç–Ω–æ–µ' if is_even else '–Ω–µ—á–µ—Ç–Ω–æ–µ'} —á–∏—Å–ª–æ {dice_value}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win_amount} –º–æ–Ω–µ—Ç!"
                else:
                    result_text = f"üòî –í—ã–ø–∞–ª–æ {'—á–µ—Ç–Ω–æ–µ' if is_even else '–Ω–µ—á–µ—Ç–Ω–æ–µ'} —á–∏—Å–ª–æ {dice_value}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
            else:
                result_text = f"üòî –í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ {dice_value}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            sent_message = await message.answer(
                f"{user_mention}, {result_text}\n\n"
                f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {wallet.get_balance()} –º–æ–Ω–µ—Ç",
                parse_mode=ParseMode.MARKDOWN
            )
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            asyncio.create_task(delete_message_after_delay(sent_message, 5))
            asyncio.create_task(delete_message_after_delay(message, 5))
            asyncio.create_task(delete_message_after_delay(dice_message, 5))  # –î–æ–±–∞–≤–ª—è–µ–º —É–¥–∞–ª–µ–Ω–∏–µ –∫—É–±–∏–∫–∞
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å—Ç–∞–≤–∫–∏
            del user_bets[user_id]
            
        except ValueError:
            sent_message = await message.answer(
                f"{user_mention}, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (—Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0).",
                parse_mode=ParseMode.MARKDOWN
            )
            asyncio.create_task(delete_message_after_delay(sent_message, 5))
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä
    elif user_id in user_answers:
        try:
            user_answer = int(message.text)
            correct_answer = user_answers[user_id]
            
            if user_answer == correct_answer:
                # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
                wallet = Wallet(db, user_id)
                new_balance = wallet.add_coins(REWARD)
                
                sent_message = await message.answer(
                    f"{user_mention}, ‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {REWARD} –º–æ–Ω–µ—Ç.\n"
                    f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç."
                )
                
                # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
                del user_answers[user_id]
                
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
                game = MathGame()
                problem, new_answer = game.generate_problem()
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
                user_answers[user_id] = new_answer
                
                sent_message = await message.answer(
                    f"{user_mention}, ‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!\n\n"
                    f"–ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä:\n{problem}"
                )
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            asyncio.create_task(delete_message_after_delay(sent_message, 5))
            # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            asyncio.create_task(delete_message_after_delay(message, 5))
                
        except ValueError:
            # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
            return

# –£–¥–∞–ª–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ñ—É–Ω–∫—Ü–∏—é check_answer

@dp.message()
async def check_answer(message: types.Message):
    user_id = message.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–∏–º–µ—Ä
    if user_id not in user_answers:
        return
    
    try:
        user_answer = int(message.text)
        correct_answer = user_answers[user_id]
        
        if user_answer == correct_answer:
            # –ù–∞—á–∏—Å–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É
            wallet = Wallet(db, user_id)
            new_balance = wallet.add_coins(REWARD)
            
            sent_message = await message.answer(
                f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ! –ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {REWARD} –º–æ–Ω–µ—Ç.\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance} –º–æ–Ω–µ—Ç."
            )
            
            # –£–¥–∞–ª—è–µ–º –æ—Ç–≤–µ—Ç –∏–∑ —Å–ª–æ–≤–∞—Ä—è
            del user_answers[user_id]
            
        else:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä
            game = MathGame()
            problem, new_answer = game.generate_problem()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
            user_answers[user_id] = new_answer
            
            sent_message = await message.answer(
                f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑!\n\n"
                f"–ù–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä:\n{problem}"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        asyncio.create_task(delete_message_after_delay(sent_message, 5))
        # –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        asyncio.create_task(delete_message_after_delay(message, 5))
            
    except ValueError:
        # –ï—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –∑–∞–¥–µ—Ä–∂–∫–∏
async def delete_message_after_delay(message: types.Message, delay: int):
    await asyncio.sleep(delay)
    try:
        await message.delete()
    except Exception:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        pass

async def main():
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())